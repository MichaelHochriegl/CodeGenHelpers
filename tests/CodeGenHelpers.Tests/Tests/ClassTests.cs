using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.CodeAnalysis;
using Xunit;
using Xunit.Abstractions;

namespace CodeGenHelpers.Tests
{
    public class ClassTests
    {
        private readonly ITestOutputHelper _testOutputHelper;

        public ClassTests(ITestOutputHelper testOutputHelper)
        {
            _testOutputHelper = testOutputHelper;
        }

        [Fact]
        public void GenerateComplexClass()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddClass("ComplexSampleClass")
                .WithSummary("Test Summary for ComplexSampleClass")
                .WithAccessModifier(Accessibility.Public)
                .AddAttribute("MyCustomAttribute")
                .AddInterface("IMyInterface")
                .AddConstructor(Accessibility.Private)
                .AddAttribute("Obsolete")
                .AddParameter("string", "firstName")
                .Class
                .AddGeneric("T")
                .WithConstraint("class")
                .Parent;

            var expected = @"namespace AwesomeApp
{
    /// <summary>
    /// Test Summary for ComplexSampleClass
    /// </summary>
    [MyCustomAttribute]
    public partial class ComplexSampleClass <T> : IMyInterface where T : class
    {
        [Obsolete]
        private ComplexSampleClass(string firstName)
        {
        }
    }
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());

            AreEqual(expected, builder);
        }

        [Fact]
        public void GenerateComplexClassWithMultipleGenerics()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddClass("ComplexSampleClass")
                .WithSummary("Test Summary for ComplexSampleClass")
                .WithAccessModifier(Accessibility.Public)
                .AddAttribute("MyCustomAttribute")
                .AddInterface("IMyInterface")
                .AddConstructor(Accessibility.Private)
                    .AddAttribute("Obsolete")
                    .AddParameter("string", "firstName")
                    .Class
                .AddGeneric("T")
                    .WithConstraint("class")
                    .Parent
                .AddGeneric("U")
                    .WithConstraint("class")
                    .Parent;

            var expected = @"namespace AwesomeApp
{
    /// <summary>
    /// Test Summary for ComplexSampleClass
    /// </summary>
    [MyCustomAttribute]
    public partial class ComplexSampleClass <T, U> : IMyInterface where T : class where U : class
    {
        [Obsolete]
        private ComplexSampleClass(string firstName)
        {
        }
    }
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());

            AreEqual(expected, builder);
        }

        [Fact]
        public void GenerateClass()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddClass("ComplexSampleClass")
                .WithSummary("Test Summary for ComplexSampleClass")
                .WithAccessModifier(Accessibility.Public)
                .AddAttribute("MyCustomAttribute")
                .AddConstructor(Accessibility.Private)
                    .AddAttribute("Obsolete")
                    .AddParameter("string", "firstName")
                .Class;

            var expected = @"namespace AwesomeApp
{
    /// <summary>
    /// Test Summary for ComplexSampleClass
    /// </summary>
    [MyCustomAttribute]
    public partial class ComplexSampleClass
    {
        [Obsolete]
        private ComplexSampleClass(string firstName)
        {
        }
    }
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());

            AreEqual(expected, builder);
        }

        private void AreEqual(string expected, ClassBuilder builder)
        {
            var expectedOutput = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{expected}";

            Assert.Equal(expectedOutput, builder.Build(), ignoreLineEndingDifferences: true, ignoreWhiteSpaceDifferences: true);
        }
    }
}
