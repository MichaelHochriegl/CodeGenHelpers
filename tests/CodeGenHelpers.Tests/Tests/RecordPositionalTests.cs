using CodeGenHelpers.SampleCode;
using Xunit;
using Xunit.Abstractions;

namespace CodeGenHelpers.Tests
{
    public class RecordPositionalTests
    {
        private readonly ITestOutputHelper _testOutputHelper;

        public RecordPositionalTests(ITestOutputHelper testOutputHelper)
        {
            _testOutputHelper = testOutputHelper;
        }

        [Fact]
        public void GenerateMinimalRecord()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddPositionalRecord("SampleRecord")
                .AddParameter("string", "FirstName")
                .AddParameter("string", "LastName");

            var expected = @"namespace AwesomeApp
{
    public SampleRecord(string FirstName, string LastName);
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());
            AreEqual(expected, builder);
        }

        [Fact]
        public void GenerateComplexRecord()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddPositionalRecord("SampleRecord")
                .AddParameter(nameof(MyComplexClass), "ComplexType")
                .AddParameter("string", "LastName");

            var expected = @"namespace AwesomeApp
{
    public SampleRecord(MyComplexClass ComplexType, string LastName);
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());
            AreEqual(expected, builder);
        }

        [Fact]
        public void AddAttribute()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddPositionalRecord("SampleRecord")
                .AddAttribute("Deprecated");

            var expected = @"namespace AwesomeApp
{
    [Deprecated]
    public SampleRecord();
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());
            AreEqual(expected, builder);
        }

        [Fact]
        public void AddSummary()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddPositionalRecord("SampleRecord")
                .WithSummary("This is a test summary");

            var expected = @"namespace AwesomeApp
{
    /// <summary>
    /// This is a test summary
    /// </summary>
    public SampleRecord();
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());
            AreEqual(expected, builder);
        }

        [Fact]
        public void AddInheritDoc()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddPositionalRecord("SampleRecord")
                .WithInheritDoc(true);

            var expected = @"namespace AwesomeApp
{
    /// <inheritdoc />
    public SampleRecord();
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());
            AreEqual(expected, builder);
        }

        [Fact]
        public void AddInheritDocFrom()
        {
            var builder = CodeBuilder.Create("AwesomeApp")
                .AddPositionalRecord("SampleRecord")
                .WithInheritDoc("InheritedDoc");

            var expected = @"namespace AwesomeApp
{
    /// <inheritdoc cref=""InheritedDoc""/>
    public SampleRecord();
}
";
            _testOutputHelper.WriteLine(expected);
            _testOutputHelper.WriteLine("____________________");
            _testOutputHelper.WriteLine(builder.Build());
            AreEqual(expected, builder);
        }

        private void AreEqual(string expected, RecordPositionalBuilder builder)
        {
            var expectedOutput = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

{expected}";

            Assert.Equal(expectedOutput, builder.Build(), ignoreLineEndingDifferences: true, ignoreWhiteSpaceDifferences: true);
        }
    }
}
